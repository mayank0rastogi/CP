/*
BINARY SEARCHING

Algorithm---
1. Search a sorted array by repeatedly dividing the search interval in half

2.begin with interval covering the whole array
3. if the value of the search key is less than item of the 
middle of the interval,narrow the interval to the lower half.
4.otherwise narror it to upper half.
5.Repeatedly check until the value is found or the interval is empty.
 using sorted array and reduce the time complexity to O(logn).
 
*/
#include<bits/stdc++.h>
using namespace std;
int binary_searching(int a[],int left,int right,int num)
{
    int  mid;
   while(left<=right)///first condition
   {
        
        mid=left+(right-left)/2;
        if(a[mid]==num)
        {
            return mid;
        
        }
        else if(a[mid]<num)
        {
            ///means element lies on the second half of the array
           left=mid+1;
        }
        else
        {
            ///elements find on first half of the array
            right=mid-1;
        }
   }
   return -1;
    
}

int main()
{
    int n;
    int result;
    cout<<"Enter the no of elements in an array\n";
    cin>>n;
    
    int a[n];
    cout<<"Enter the array elements \n";
    for(int i=0;i<n;i++)
    {
        cin>>a[i];
    }
    int num;
    cout<<"enter the element you want to search: \n";
    cin>>num;
     int left=0,right=n-1;
    result=binary_searching(a,left,right,num);
    if(result==-1)
    {
        cout<<"No Match Found\n";
    }
    else
    {
        cout<<"Match found\n"<<"At Index position "<<result<<'\n';
    }
    return 0;
}