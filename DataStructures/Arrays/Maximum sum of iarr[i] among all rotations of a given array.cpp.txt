/*
Problem
Maximum sum of i*arr[i] among all rotations of a given array
Given an array arr[] of n integers, find the maximum that maximizes the sum of the value of i*arr[i] where i varies from 0 to n-1.

Examples:  

Input: arr[] = {8, 3, 1, 2}
Output: 29
Explanation: Lets look at all the rotations,
{8, 3, 1, 2} = 8*0 + 3*1 + 1*2 + 2*3 = 11
{3, 1, 2, 8} = 3*0 + 1*1 + 2*2 + 8*3 = 29
{1, 2, 8, 3} = 1*0 + 2*1 + 8*2 + 3*3 = 27
{2, 8, 3, 1} = 2*0 + 8*1 + 3*2 + 1*3 = 17
*/

#include<bits/stdc++.h>
using namespace std;

int max_sum(int a[],int n)
{
    int complete_sum=0;
    //compute the sum of all arrays
    for(int i=0;i<n;i++)
    {
        complete_sum+=a[i];
    }
    
    //for every current value of i
    int curr_val=0;
    for(int i=0;i<n;i++)
    {
        curr_val+=i*a[i];
    }
    
    //stores in a another varibale named as res
    int res=curr_val;
    
    //computer the next rotated result
    for(int i=1;i<n;i++)//starts next index for next rotated array result
    {
        int next_val=curr_val-(complete_sum-a[i-1])+a[i-1]*(n-1);
        
        //update current value
        curr_val=next_val;
        
        //update result//finding maximum of all posible rotated array
        res=max(res,next_val);
    }
    return res;
}

int main()
{
    int n;
    cin>>n;
   //int a[]={1,2,3,4,5,6,7};
   int a[n];
  for(int i=0;i<n;i++)
{
      cin>>a[i];
   }
  // int n = sizeof(a)/sizeof(a[0]);
   //calling function
   
   
   cout<<max_sum(a,n)<<endl;
   
    
    return 0;
}