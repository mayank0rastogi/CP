You are given a string allowed consisting of distinct characters and an array of strings words. A string is consistent if all characters in the string appear in the string allowed.

Return the number of consistent strings in the array words.

 

Example 1:

Input: allowed = "ab", words = ["ad","bd","aaab","baa","badab"]
Output: 2
Explanation: Strings "aaab" and "baa" are consistent since they only contain characters 'a' and 'b'.
Example 2:

Input: allowed = "abc", words = ["a","b","c","ab","ac","bc","abc"]
Output: 7
Explanation: All strings are consistent.
Example 3:

Input: allowed = "cad", words = ["cc","acd","b","ba","bac","bad","ac","d"]
Output: 4
Explanation: Strings "cc", "acd", "ac", and "d" are consistent.
 

Constraints:

1 <= words.length <= 104
1 <= allowed.length <= 26
1 <= words[i].length <= 10
The characters in allowed are distinct.
words[i] and allowed contain only lowercase English letters.


C++ Solution:

class Solution {
public:
    int countConsistentStrings(string allowed, vector<string>& words) {
        
        unordered_map<char,int>mp;
        //using this we map the characte and their respective count to 1
        for(auto ch:allowed)
        {
            mp[ch]=1;
        }
        
        int result=0;
        
        for(auto s:words)//s conatins every words at every index in a vector
        {
            int flag=1;
            for(auto re:s)//re contains every letters in a particular word and check that                 
            //particular char allowed is present or not in the words vector
            {
                if(mp[re]==0)
                {
                    flag=0;//it means not found
                    break;
                }
            }
            
            if(flag==1)
            {
               result++;
            }
        }
        return result;
    }
};



Python solution:

class Solution:
    def countConsistentStrings(self, allowed: str, words: List[str]) -> int:
        result=0
        
        allowedset=set(allowed)
        
        for i in words:
            setwords=set(i)
            if len(setwords-allowedset) ==0:
                result=result+1;
        return result;
            
